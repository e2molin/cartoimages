{"version":3,"sources":["components/Spinner/index.js","components/Gif/index.js","components/ListOfGifs/index.js","services/getGifs.js","hooks/useGifs.js","pages/Home/index.js","pages/SearchResults/index.js","pages/Detail/index.js","App.js","reportWebVitals.js","index.js"],"names":["Spinner","className","Gif","title","id","url","to","loading","src","alt","ListOfGifs","gifs","map","apiKey","getGifs","keyword","apiURL","fetch","then","res","json","response","data","Array","isArray","image","images","downsized_medium","useGifs","useState","setLoading","setGifs","keywordToUse","localStorage","getItem","useEffect","setItem","POPULAR_SEARCHES","Home","setKeyword","useLocation","pushLocation","onSubmit","evt","preventDefault","console","log","type","value","onChange","target","placeholder","popularTerm","SearchResults","params","Detail","App","component","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.098af68b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './styles.css'\r\n\r\nexport default function Spinner () {\r\n  return <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n}","/**\r\n * 游빌 Componente para generar las cards con las im치genes  * \r\n */\r\nimport React from 'react'\r\nimport {Link} from 'wouter'\r\nimport './styles.css'\r\n\r\nexport default function Gif({title, id, url}){\r\n\r\n  return (\r\n        <div className=\"Gifcontainer\">\r\n          <Link to={`/gif/${id}`} className=\"Gif-link\">\r\n            <h4>{title}</h4>\r\n            <img loading='lazy' src={url} alt={title} />\r\n          </Link>\r\n        </div>\r\n        ) \r\n\r\n}\r\n","import React from 'react'\r\nimport Gif from '../Gif'\r\nimport './styles.css'\r\n\r\nexport default function ListOfGifs ({gifs}) {\r\n  return <div className='ListOfGifs'>\r\n    {\r\n      gifs.map(({id, title, url}) =>\r\n        <Gif\r\n          id={id}\r\n          key={id}\r\n          title={title}\r\n          url={url}\r\n        />\r\n      )\r\n    }\r\n  </div>\r\n}","//Accede a im치genes de GiPHY. La cuenta de acceso es gratuita y te proporcionan un APIKEY\r\n\r\nconst apiKey = 'IjmmViOE2rq5nh9jplq6JWU32Dcak2Ju';\r\n\r\nexport default function getGifs({keyword = 'rembrandt'}={}){\r\n\r\n  const apiURL=`https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${keyword}&limit=25&offset=0&rating=g&lang=en`\r\n\r\n  return fetch(apiURL)\r\n    .then(res=>res.json())\r\n    .then(response=>{\r\n     \r\n      const {data=[]} = response;\r\n\r\n      if (Array.isArray(data))  {\r\n        const gifs = data.map(image => {\r\n          const {images, title, id} = image;\r\n          const {url} = images.downsized_medium;\r\n          return {title, id, url};\r\n        })  \r\n      return gifs\r\n    }\r\n  })\r\n}","import {useEffect,useState} from 'react'\r\nimport getGifs from '../services/getGifs'\r\n\r\nexport function useGifs({keyword} = {keyword: null}){\r\n\r\n  const [loading,setLoading] = useState(false);\r\n  const [gifs, setGifs] = useState([])\r\n\r\n  //const keywordToUse = keyword ? keyword : localStorage.getItem('lastKeyword') //La de abajo es Equivalente\r\n\r\n  const keywordToUse = keyword || localStorage.getItem('lastKeyword')\r\n\r\n  //Esta funci칩n se ejecuta cada vez que se renderiza el componente\r\n  useEffect(function(){\r\n              setLoading(true)\r\n              getGifs({ keyword: keywordToUse})\r\n                .then(gifs =>{\r\n                  setGifs(gifs)\r\n                  setLoading(false)\r\n                  localStorage.setItem('lastKeyword',keyword) //Almacenamos la 칰ltima b칰squeda\r\n              })\r\n  },[keyword])//Pero aqu칤 le decimos que se ejecute s칩lo cuando se renderice el componente y cambie el valor de keyword\r\n\r\n  return {loading,gifs}\r\n\r\n}","import React,{useState} from \"react\"\r\nimport {Link, useLocation} from \"wouter\" //useLocation es un hook de wouter\r\nimport Spinner from '../../components/Spinner'\r\nimport ListOfGifs from '../../components/ListOfGifs'\r\nimport {useGifs} from '../../hooks/useGifs'\r\n\r\nconst POPULAR_SEARCHES = [\"Paris\", \"Madrid\", \"Roma\", \"London\", \"New York\"]\r\n\r\nexport default function Home() {\r\n\r\n  const [keyword,setKeyword] = useState('')\r\n  const [path,pushLocation] = useLocation() \r\n\r\n  //Aqu칤 usamos un custom hook para mostrar algunos por defecto\r\n  const {loading,gifs} = useGifs()\r\n\r\n\r\n  //Extraemos los m칠todos de callback en constantes por limpieza de c칩digo. Dejarlos dentro del JSX es m치s lioso\r\n  const handleSubmit = evt =>{\r\n    //Navegar a otra ruta\r\n    evt.preventDefault() //As칤 evitamos el comportamiento por defecto de la p치gina, que ser칤a refrescarse y borrar el contenido del imputbox\r\n    pushLocation(`/search/${keyword}`) //usamos el hook de Wouter para navegar program치ticamente a la ruta de b칰squedas\r\n    console.log(keyword);\r\n  }\r\n  const handleChange = evt =>{\r\n    // Cada vez que actualizamos el contenido del input actualizamos el keyword\r\n    setKeyword(evt.target.value);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"App-Title\">Buscador</h3>\r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" value={keyword} onChange={handleChange} placeholder=\"Introduce GIF a buscar\"></input>\r\n      </form>\r\n      <h3 className=\"App-Title\">Los Gifs m치s populares</h3>\r\n      <ul>\r\n          {\r\n            POPULAR_SEARCHES.map((popularTerm)=>(\r\n              <li key={popularTerm}>\r\n                <Link to={`/search/${popularTerm}`}>Gifs de {popularTerm}</Link>\r\n              </li>\r\n            ))\r\n          }\r\n      </ul>\r\n\r\n      {loading ? <Spinner/> : <ListOfGifs gifs={gifs} />}\r\n\r\n    </>\r\n  )\r\n\r\n}","import React from \"react\";\r\nimport Spinner from '../../components/Spinner'\r\nimport ListOfGifs from '../../components/ListOfGifs'\r\nimport {useGifs} from '../../hooks/useGifs' //Custom Hooks\r\n\r\nexport default function SearchResults({ params }){\r\n\r\n  const {keyword} = params\r\n  const {loading, gifs} = useGifs({keyword}) //As칰 usamos el custom hook que hemos hecho\r\n\r\n  return (\r\n    <>\r\n      {/**\r\n       * Renderizado condicional que muestra el spinner hasta tener los datos de Giphy\r\n       */}\r\n      {loading ? <Spinner/> : <ListOfGifs gifs={gifs} />}\r\n    </>\r\n  )\r\n\r\n}","import React from 'react'\r\n\r\nexport default function Detail({params}){\r\n  \r\n  console.log(params.id);\r\n  return <h1>GIF con id {params.id}</h1>\r\n\r\n}","import React from 'react';\nimport './App.css';\n\nimport Home from './pages/Home'\nimport SearchResults from './pages/SearchResults'\nimport Detail from './pages/Detail'\n\nimport {Link, Route} from \"wouter\"\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <section className=\"App-content\">\n        <h1>CartoImagen</h1>\n        <img className=\"logo\" src=\"http://www.develmap.com/img/logo.png\" />\n        {/* Men칰 original */}{/* As칤 se comenta dentro del bloque de representaci칩n donde usamos JSX */}\n        {/*\n        <section className=\"menu\">\n          <Link to=\"/search/pandas\">Gifs de pandas</Link>\n          <Link to=\"/search/tiger\">Gifs de tigres</Link>\n          <Link to=\"/search/lion\">Gifs de leones</Link>\n        </section>\n        */}\n        \n\n        <Route component={Home} path=\"/\" />\n        <Route component={SearchResults} path=\"/search/:keyword\" />\n        <Route component={Detail} path=\"/gif/:id\" />\n\n\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}