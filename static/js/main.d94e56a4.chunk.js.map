{"version":3,"sources":["services/settings.js","components/Gif/index.js","components/ListOfGifs/index.js","services/getGifs.js","context/GifsContext.js","hooks/useGifs.js","components/Spinner/index.js","components/TrendingSearches/index.js","hooks/useNearScreen.js","pages/Home/index.js","pages/SearchResults/index.js","pages/Detail/index.js","hooks/useGlobalGifs.js","context/StaticContext.js","App.js","serviceWorker.js","index.js"],"names":["API_KEY","API_URL","Gif","title","id","url","className","to","loading","alt","src","ListOfGifs","gifs","map","fromApiResponseToGifs","apiResponse","data","Array","isArray","image","images","downsized_medium","getGifs","limit","keyword","page","apiURL","fetch","then","res","json","Context","React","createContext","GifsContextProvider","children","useState","setGifs","Provider","value","useGifs","setLoading","loadingNextPage","setLoadingNextPage","setPage","useContext","GifsContext","keywordToUse","localStorage","getItem","useEffect","setItem","nextGifs","prevGifs","concat","Spinner","TrendingSearches","lazy","LazyTrending","distance","isNearScreen","setShow","fromRef","useRef","observer","onChange","entries","isIntersecting","disconnect","Promise","resolve","IntersectionObserver","rootMargin","observe","current","useNearScreen","ref","fallback","Home","setKeyword","useLocation","pushLocation","onSubmit","evt","preventDefault","placeholder","target","type","SearchResults","params","decodeURI","onClick","prevPage","Detail","gif","find","singleGif","name","suscribeteAlCanal","App","StaticContext","component","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d94e56a4.chunk.js","sourcesContent":["//export const API_KEY = 'dIJrma20pSU6ymMwWnDbiaT7NFHeAGVa'//midudev\r\nexport const API_KEY = 'IjmmViOE2rq5nh9jplq6JWU32Dcak2Ju'//e2molin\r\n\r\nexport const API_URL = 'https://api.giphy.com/v1'","import React from 'react'\r\nimport {Link} from 'wouter'\r\nimport './Gif.css'\r\n\r\nexport default function Gif ({ title, id, url }) {\r\n  return (\r\n    <div className=\"Gif\">\r\n      <Link to={`/gif/${id}`} className='Gif-link'>\r\n        <h4>{title}</h4>\r\n        <img loading='lazy' alt={title} src={url} />\r\n      </Link>\r\n    </div>\r\n\r\n  )\r\n}","import React from 'react'\r\nimport Gif from '../Gif'\r\nimport './styles.css'\r\n\r\nexport default function ListOfGifs ({gifs}) {\r\n  return <div className='ListOfGifs'>\r\n    {\r\n      gifs.map(({id, title, url}) =>\r\n        <Gif\r\n          id={id}\r\n          key={id}\r\n          title={title}\r\n          url={url}\r\n        />\r\n      )\r\n    }\r\n  </div>\r\n}","import {API_KEY, API_URL} from './settings'\r\n\r\nconst fromApiResponseToGifs = apiResponse => {\r\n  const {data = []} = apiResponse\r\n  if (Array.isArray(data)) {\r\n    const gifs = data.map(image => {\r\n      const {images, title, id} = image\r\n      const { url } = images.downsized_medium\r\n      return { title, id, url }\r\n    })\r\n    return gifs\r\n  }\r\n  return []\r\n}\r\n\r\nexport default function getGifs ({limit = 25, keyword = 'morty', page = 0} = {}) {\r\n  const apiURL = `${API_URL}/gifs/search?api_key=${API_KEY}&q=${keyword}&limit=${limit}&offset=${page * limit}&rating=G&lang=en`\r\n\r\n  return fetch(apiURL)\r\n    .then(res => res.json())\r\n    .then(fromApiResponseToGifs)\r\n}","import React, {useState} from 'react'\r\n\r\nconst Context = React.createContext({})\r\n\r\nexport function GifsContextProvider ({children}) {\r\n  const [gifs, setGifs] = useState([])\r\n\r\n  return <Context.Provider value={{gifs, setGifs}}>\r\n    {children}\r\n  </Context.Provider>\r\n}\r\n\r\nexport default Context","import {useContext, useEffect, useState} from 'react'\r\nimport getGifs from '../services/getGifs'\r\nimport GifsContext from '../context/GifsContext'\r\n\r\nconst INITIAL_PAGE = 0\r\n\r\n// AsÃ­ se pasa un parÃ¡metro opcional\r\nexport function useGifs ({ keyword } = { keyword: null }) {\r\n  const [loading, setLoading] = useState(false)\r\n  const [loadingNextPage, setLoadingNextPage] = useState(false)\r\n\r\n  const [page, setPage] = useState(INITIAL_PAGE)\r\n  const {gifs, setGifs} = useContext(GifsContext)\r\n\r\n  // Recuperamos la keyword del localStorage\r\n  const keywordToUse = keyword || localStorage.getItem('lastKeyword') || 'random'\r\n    //const keywordToUse = keyword ? keyword : localStorage.getItem('lastKeyword') //ðŸ‘† Equivalente\r\n\r\n\r\n    // Esta funciÃ³n se ejecuta cada vez que se renderiza el componente\r\n  useEffect(function () {\r\n    setLoading(true)\r\n\r\n    getGifs({ keyword: keywordToUse })\r\n      .then(gifs => {\r\n        setGifs(gifs)\r\n        setLoading(false)\r\n        localStorage.setItem('lastKeyword', keyword) // Almacenamos la Ãºltima bÃºsqueda\r\n      })\r\n  }, [keyword, keywordToUse, setGifs]) // Pero aquÃ­ le decimos que se ejecute sÃ³lo cuando se renderice el componente y cambie el valor de keyword\r\n\r\n  useEffect(function () {\r\n    if (page === INITIAL_PAGE) return\r\n\r\n    setLoadingNextPage(true)\r\n\r\n    getGifs({ keyword: keywordToUse, page })\r\n      .then(nextGifs => {\r\n        setGifs(prevGifs => prevGifs.concat(nextGifs))\r\n        setLoadingNextPage(false)\r\n      })\r\n  }, [keywordToUse, page, setGifs])\r\n\r\n  return {loading, loadingNextPage, gifs, setPage}\r\n}","import React from 'react'\r\nimport './styles.css'\r\n\r\nexport default function Spinner () {\r\n  return <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n}","import React, {Suspense} from 'react'\r\nimport useNearScreen from 'hooks/useNearScreen'\r\nimport Spinner from 'components/Spinner'\r\n\r\nconst TrendingSearches = React.lazy(\r\n  () => import('./TrendingSearches')\r\n)\r\n\r\nexport default function LazyTrending () {\r\n  const {isNearScreen, fromRef} = useNearScreen({\r\n    distance: '0px'\r\n  })\r\n\r\n  return <div ref={fromRef}>\r\n    <Suspense fallback={<Spinner />}>\r\n      {isNearScreen ? <TrendingSearches /> : <Spinner />}\r\n    </Suspense>\r\n  </div>\r\n}","import {useEffect, useState, useRef} from 'react'\r\n\r\nexport default function useNearScreen ({ distance = '100px' } = {}) {\r\n  const [isNearScreen, setShow] = useState(false)\r\n  const fromRef = useRef()\r\n\r\n  useEffect(() => {\r\n    let observer\r\n\r\n    const onChange = (entries, observer) => {\r\n      const el = entries[0]\r\n      if (el.isIntersecting) {\r\n        setShow(true)\r\n        observer.disconnect()\r\n      }\r\n    }\r\n\r\n    Promise.resolve(\r\n      typeof IntersectionObserver !== 'undefined'\r\n        ? IntersectionObserver\r\n        : import('intersection-observer')\r\n    ).then(() => {\r\n      observer = new IntersectionObserver(onChange, {\r\n        rootMargin: distance\r\n      })\r\n  \r\n      observer.observe(fromRef.current)\r\n    })\r\n\r\n    return () => observer && observer.disconnect()\r\n  })\r\n\r\n  return {isNearScreen, fromRef}\r\n}","import React, {useState} from \"react\"\r\nimport { useLocation } from \"wouter\" // useLocation es un hook de wouter\r\nimport ListOfGifs from 'components/ListOfGifs'\r\nimport {useGifs} from 'hooks/useGifs'\r\nimport TrendingSearches from 'components/TrendingSearches'\r\n\r\nexport default function Home() {\r\n  const [keyword, setKeyword] = useState('')\r\n  const [path, pushLocation] = useLocation()\r\n\r\n  const {loading, gifs} = useGifs() // AquÃ­ usamos un custom hook para mostrar algunos por defecto\r\n\r\n\r\n    // Extraemos los mÃ©todos de callback en constantes por limpieza de cÃ³digo. Dejarlos dentro del JSX es mÃ¡s lioso\r\n  const handleSubmit = evt => {\r\n    evt.preventDefault()  // AsÃ­ evitamos el comportamiento por defecto de la pÃ¡gina, que serÃ­a refrescarse y borrar el contenido del imputbox\r\n    pushLocation(`/search/${keyword}`)  //usamos el hook de Wouter para navegar programÃ¡ticamente a la ruta de bÃºsquedas\r\n  }\r\n\r\n  const handleChange = evt => {\r\n    // Cada vez que actualizamos el contenido del input actualizamos el keyword\r\n    setKeyword(evt.target.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <button>Buscar</button>\r\n        <input placeholder=\"Search a gif here...\" onChange={handleChange} type='text' value={keyword} />\r\n      </form>\r\n      <div className=\"App-main\">\r\n        <div className=\"App-results\">\r\n          <h3 className=\"App-title\">Ãšltima bÃºsqueda</h3>\r\n          <ListOfGifs gifs={gifs} />\r\n        </div>\r\n        <div className=\"App-category\">\r\n          <TrendingSearches />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}","import React from 'react'\r\nimport Spinner from 'components/Spinner'\r\nimport ListOfGifs from 'components/ListOfGifs'\r\nimport {useGifs} from 'hooks/useGifs' //Custom Hook\r\n\r\nexport default function SearchResults ({ params }) {\r\n  const { keyword } = params\r\n  const { loading, gifs, setPage } = useGifs({ keyword }) //AsÃ­ usamos el custom hook que hemos hecho\r\n\r\n  const handleNextPage = () => setPage(prevPage => prevPage + 1)\r\n\r\n  return <>\r\n      {/**\r\n        * Renderizado condicional que muestra el spinner hasta tener los datos de Giphy\r\n        */}  \r\n    {loading\r\n      ? <Spinner />\r\n      : <>\r\n        <h3 className=\"App-title\">\r\n          {decodeURI(keyword)}\r\n        </h3>\r\n        <ListOfGifs gifs={gifs} />\r\n      </>\r\n    }\r\n    <br />\r\n    <button onClick={handleNextPage}>Get next page</button>\r\n  </>\r\n}","import React from 'react'\r\nimport Gif from 'components/Gif'\r\nimport useGlobalGifs from 'hooks/useGlobalGifs'\r\n\r\nexport default function Detail ({ params }) {\r\n  const gifs = useGlobalGifs()\r\n\r\n  const gif = gifs.find(singleGif =>\r\n    singleGif.id === params.id\r\n  )\r\n\r\n  return <>\r\n      <h3 className=\"App-title\">{gif.title}</h3>\r\n      <Gif {...gif} />\r\n    </>\r\n}","import {useContext} from 'react'\r\nimport GifsContext from '../context/GifsContext'\r\n\r\nexport default function useGlobalGifs () {\r\n  return useContext(GifsContext).gifs\r\n}","import React from 'react'\r\n\r\nconst Context = React.createContext({\r\n  name: 'esto-es-sin-provider',\r\n  suscribeteAlCanal: true\r\n})\r\n\r\nexport default Context","import React from 'react';\r\nimport './App.css'\r\nimport Home from './pages/Home'\r\nimport SearchResults from './pages/SearchResults'\r\nimport Detail from './pages/Detail'\r\nimport StaticContext from './context/StaticContext'\r\nimport {GifsContextProvider} from './context/GifsContext'\r\nimport { Link, Route } from \"wouter\"\r\n\r\nexport default function App() {\r\n  return (\r\n  <StaticContext.Provider value={{name: 'midudev',  suscribeteAlCanal: true}}>\r\n      {/* El contexto envuelve a todo para que todos los elementos y componentes dentro del contexto puedan acceder a Ã©l */}\r\n      <div className=\"App\">\r\n        <section className=\"App-content\">\r\n          <Link to=\"/\">\r\n            <figure className=\"App-logo\">\r\n              <img alt='Giffy logo' src='/logo.png' />\r\n            </figure>\r\n          </Link>\r\n          {/* MenÃº original */}{/* AsÃ­ se comenta dentro del bloque de representaciÃ³n donde usamos JSX */}\r\n          <GifsContextProvider>\r\n            <Route\r\n              component={Home}\r\n              path=\"/\"\r\n            />\r\n            <Route\r\n              component={SearchResults}\r\n              path=\"/search/:keyword\"  />\r\n            <Route\r\n              component={Detail}\r\n              path=\"/gif/:id\"\r\n            />\r\n          </GifsContextProvider>\r\n        </section>\r\n      </div>\r\n    </StaticContext.Provider>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}